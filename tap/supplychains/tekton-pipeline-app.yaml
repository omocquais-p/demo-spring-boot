#! Test pipeline used when ootb-supply-chain-testing or ootb-supply-chain-testing-scanning is enabled.
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: test-pipeline-java
  labels:
    apps.tanzu.vmware.com/pipeline: test
    apps.tanzu.vmware.com/language: java
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  params:
    - name: source-url
    - name: source-revision
  tasks:
    - name: test
      params:
        - name: source-url
          value: $(params.source-url)
        - name: source-revision
          value: $(params.source-revision)
      taskSpec:
        params:
          - name: source-url
          - name: source-revision
        steps:
          - image: ghcr.io/alexandreroman/maven-gradle:17
            name: client
            env:
              # Connect to the sidecar over TCP, with TLS.
              - name: DOCKER_HOST
                value: tcp://localhost:2376
              # Verify TLS.
              - name: DOCKER_TLS_VERIFY
                value: '1'
              # Use the certs generated by the sidecar daemon.
              - name: DOCKER_CERT_PATH
                value: /certs/client
            script: |
              ls /var/run/
              echo "---------"
              find /var/run/
              echo "---------"
              printenv
              echo "---------"
              cd `mktemp -d`
              wget -qO- $(params.source-url) | tar xvz -m
              SKIP=".skiptests"
              if [ -f "$SKIP" ]; then
                echo "Skipping tests"
                exit 0
              fi
              MVN="pom.xml"
              GRADLE="build.gradle"
              if [ -f "$MVN" ]; then
                mvn --batch-mode --no-transfer-progress verify
              elif [ -f "$GRADLE" ]; then
                gradle test
              else
                echo "This Java workload does not use Maven or Gradle: cannot run tests."
              fi
            volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
        sidecars:
          - image: docker:dind
            name: server
            args:
              - --storage-driver=vfs
              - --userland-proxy=false
#              - --debug
            securityContext:
              privileged: true
            env:
              # Write generated certs to the path shared with the client.
              - name: DOCKER_TLS_CERTDIR
                value: /certs
            volumeMounts:
              - mountPath: /var/run/
                name: dind-socket
              - mountPath: /certs/client
                name: dind-certs
            # Wait for the dind daemon to generate the certs it will share with the
            # client.
            readinessProbe:
              periodSeconds: 1
              exec:
                command: ['ls', '/certs/client/ca.pem']
        volumes:
          - name: dind-certs
            emptyDir: {}
          - name: dind-socket
            emptyDir: {}