#! Test pipeline used when ootb-supply-chain-testing or ootb-supply-chain-testing-scanning is enabled.
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: test-pipeline-java
  labels:
    apps.tanzu.vmware.com/pipeline: test
    apps.tanzu.vmware.com/language: java
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  params:
    - name: source-url
    - name: source-revision
  tasks:
    - name: test
      params:
        - name: source-url
          value: $(params.source-url)
        - name: source-revision
          value: $(params.source-revision)
      taskSpec:
        params:
          - name: source-url
          - name: source-revision
        steps:
          - image: bellsoft/liberica-openjdk-alpine:18
            name: client
            env:
              # Connect to the sidecar over TCP, with TLS.
              - name: DOCKER_HOST
                value: tcp://localhost:2376
              # Verify TLS.
              - name: DOCKER_TLS_VERIFY
                value: '1'
              # Use the certs generated by the sidecar daemon.
              - name: DOCKER_CERT_PATH
                value: /certs/client
              - name: DOCKER_CONFIG
                value: /new-config.json
            script: |                                        
              sed 's/,\"auth\":\"\"//g' ~/.docker/config.json > new-config.json
              cd `mktemp -d`
              wget -qO- $(params.source-url) | tar xvz -m
              if [ -f "./mvnw" ]; then
                  ./mvnw verify -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=info
              elif [ -f "./gradlew" ]; then
                  ./gradlew test
              else
                  echo "WARNING: No tests were run. This workload is not built with one of the currently supported frameworks (maven or gradle). If using another language/framework, update the image and the script sections of the 'pipeline.tekton.dev' resource in your namespace to match your language/framework."
                  exit 1
              fi
            volumeMounts:
              - mountPath: /var/run/
                name: dind-socket
              - mountPath: /certs/client
                name: dind-certs
        sidecars:
          - image: docker:dind
            name: server
            securityContext:
              privileged: true
            env:
              # Write generated certs to the path shared with the client.
              - name: DOCKER_TLS_CERTDIR
                value: /certs
            volumeMounts:
              - mountPath: /var/run/
                name: dind-socket
              - mountPath: /certs/client
                name: dind-certs
            # Wait for the dind daemon to generate the certs it will share with the
            # client.
            readinessProbe:
              periodSeconds: 1
              exec:
                command: ['ls', '/certs/client/ca.pem']
        volumes:
          - name: dind-certs
            emptyDir: {}
          - name: dind-socket
            emptyDir: {}